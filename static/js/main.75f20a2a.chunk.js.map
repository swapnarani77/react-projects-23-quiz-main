{"version":3,"sources":["logo.svg","context.jsx","SignupForm.jsx","Loading.jsx","Modal.jsx","App.js","reportWebVitals.js","index.js"],"names":["table","sports","history","politics","AppContext","React","createContext","AppProvider","children","useState","waiting","setWaiting","loading","setLoading","questions","setQuestions","index","setIndex","correct","setCorrect","error","setError","amount","category","difficulty","quiz","setQuiz","isModalOpen","setIsModalOpen","fetchQuestions","url","a","axios","catch","err","console","log","response","data","results","length","openModal","alert","nextQuestion","oldIndex","Provider","value","handleChange","e","name","target","handleSubmit","preventDefault","checkAnswer","oldState","closeModal","useGlobalContext","useContext","SignupForm","className","htmlFor","type","id","onChange","min","max","onClick","Loading","Modal","toFixed","App","question","correct_answer","incorrect_answers","answers","tempIndex","Math","floor","random","push","dangerouslySetInnerHTML","__html","map","answer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75f20a2a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from 'axios';\r\nimport React, { useState, useContext } from 'react';\r\n\r\nconst table = {\r\n    sports: 21,\r\n    history: 23,\r\n    politics: 24,\r\n}\r\n\r\nconst API_ENDPOINT = 'https://opentdb.com/api.php?';\r\n\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n    const [waiting, setWaiting] = useState(true)\r\n    const [loading, setLoading] = useState(false)\r\n    const [questions, setQuestions] = useState([])\r\n    const [index, setIndex] = useState(0)\r\n    const [correct, setCorrect] = useState(0)\r\n    const [error, setError] = useState(false)\r\n    const [quiz, setQuiz] = useState({\r\n        amount: 10,\r\n        category: 'sports',\r\n        difficulty: 'easy',\r\n    });\r\n    const [isModalOpen, setIsModalOpen] = useState(false)\r\n\r\n    const fetchQuestions = async (url) => {\r\n        setLoading(true)\r\n        setWaiting(false)\r\n        const response = await axios(url).catch((err) => console.log(err));\r\n        if (response) {\r\n            const data = response.data.results;\r\n            if (data.length > 0) {\r\n                setQuestions(data);\r\n                setWaiting(false);\r\n                setLoading(false);\r\n                setError(false);\r\n            } else {\r\n                setError(true);\r\n                setWaiting(true);\r\n            }\r\n        } else {\r\n            setWaiting(true);\r\n        }\r\n    }\r\n    const openModal = () => {\r\n        setIsModalOpen(true);\r\n        alert('hi')\r\n    }\r\n    const closeModal = () => {\r\n        setWaiting(true)\r\n        setCorrect(0)\r\n        setIsModalOpen(false)\r\n    }\r\n    const nextQuestion = () => {\r\n        setIndex((oldIndex) => {\r\n            const index = oldIndex + 1\r\n            if (index > questions.length - 1) {\r\n                openModal()\r\n                return 0\r\n            } else {\r\n                return index\r\n            }\r\n        })\r\n    }\r\n\r\n    const checkAnswer = (value) => {\r\n\r\n        if (value) {\r\n            setCorrect((oldState) => oldState + 1);\r\n        }\r\n        nextQuestion();\r\n    }\r\n    const handleChange = (e) => {\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n        setQuiz({ ...quiz, [name]: value })\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        const { amount, category, difficulty } = quiz\r\n\r\n        const url = `${API_ENDPOINT}amount=${amount}&difficulty=${difficulty}&category=${table[category]}&type=multiple`\r\n        fetchQuestions(url)\r\n    }\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                waiting,\r\n                loading,\r\n                questions,\r\n                index,\r\n                correct,\r\n                error,\r\n                isModalOpen,\r\n                quiz,\r\n                handleChange,\r\n                handleSubmit,\r\n                checkAnswer,\r\n                openModal,\r\n                closeModal,\r\n                nextQuestion\r\n            }}>\r\n            {children}\r\n        </AppContext.Provider>\r\n    )\r\n}\r\nexport const useGlobalContext = () => {\r\n    return useContext(AppContext);\r\n}\r\nexport { AppProvider, AppContext };","import React from 'react';\r\nimport { useGlobalContext } from './context';\r\n\r\nconst SignupForm = () => {\r\n    const { quiz, handleChange, handleSubmit } = useGlobalContext();\r\n    return (\r\n        <>\r\n            <main>\r\n                <section className='quiz quiz-small'>\r\n                    <form className='setup-form'>\r\n                        <h2>setup quiz</h2>\r\n                        {/* amount */}\r\n                        <div className='form-control'>\r\n                            <label htmlFor='amount'>number of questions</label>\r\n                            <input\r\n                                type='number'\r\n                                name='amount'\r\n                                id='amount'\r\n                                value={quiz.amount}\r\n                                onChange={handleChange}\r\n                                className='form-input'\r\n                                min={1}\r\n                                max={50}\r\n                            />\r\n                        </div>\r\n                        {/* category */}\r\n\r\n                        <div className='form-control'>\r\n                            <label htmlFor='category'>category</label>\r\n                            <select\r\n                                name='category'\r\n                                id='category'\r\n                                className='form-input'\r\n                                value={quiz.category}\r\n                                onChange={handleChange}\r\n                            >\r\n                                <option value='sports'>sports</option>\r\n                                <option value='history'>history</option>\r\n                                <option value='politics'>politics</option>\r\n                            </select>\r\n                        </div>\r\n                        {/* difficulty */}\r\n\r\n                        <div className='form-control'>\r\n                            <label htmlFor='difficulty'>select difficulty</label>\r\n                            <select\r\n                                name='difficulty'\r\n                                id='difficulty'\r\n                                className='form-input'\r\n                                value={quiz.difficulty}\r\n                                onChange={handleChange}\r\n                            >\r\n                                <option value='easy'>easy</option>\r\n                                <option value='medium'>medium</option>\r\n                                <option value='hard'>hard</option>\r\n                            </select>\r\n                        </div>\r\n                        <button type='submit' onClick={handleSubmit} className='submit-btn'>\r\n                            start Test\r\n          </button>\r\n                    </form>\r\n                </section>\r\n            </main>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SignupForm;","import React from 'react';\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <main>\r\n            <div className='loading'></div>\r\n        </main>\r\n    )\r\n}\r\n\r\n\r\nexport default Loading;","import React from 'react';\r\nimport { useGlobalContext } from './context';\r\n\r\nconst Modal = () => {\r\n    const { isModalOpen, closeModal, correct, questions } = useGlobalContext();\r\n    return (\r\n        <>\r\n            <div className={`${isModalOpen ? \"modal-container isOpen\" : 'modal-container'}`}>\r\n                <div className=\"modal-content\">\r\n                    <h2>congrats!</h2>\r\n                    <p>You answered {((correct / questions.length) * 100).toFixed(0)}% of questions correctly</p>\r\n                    <button className=\"close-btn\" onClick={closeModal}>play again</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Modal;","import logo from './logo.svg';\nimport './App.css';\nimport { useGlobalContext } from './context';\nimport SignupForm from './SignupForm';\nimport Loading from './Loading';\nimport Modal from './Modal';\n\nfunction App() {\n  const {\n    waiting,\n    loading,\n    questions,\n    index,\n    correct,\n    error,\n    isModalOpen,\n    quiz, checkAnswer } = useGlobalContext();\n\n  if (waiting) {\n    return <SignupForm />\n  }\n  if (loading) {\n    return <Loading />\n  }\n  if (questions) {\n    console.log(questions);\n    const { question, correct_answer, incorrect_answers, nextQuestion } = questions[index];\n    let answers = [...incorrect_answers];\n    const tempIndex = Math.floor(Math.random() * 4)\n    console.log(tempIndex)\n    if (tempIndex === 3) {\n      answers.push(correct_answer)\n    } else {\n      answers.push(answers[tempIndex])\n      answers[tempIndex] = correct_answer\n    }\n    return (\n      <main>\n        <Modal />\n        <section className=\"quiz\">\n          <p className=\"correct-answers\">correct answers : {correct}/{index}</p>\n          <article className=\"container\">\n            <h2 dangerouslySetInnerHTML={{ __html: question }}></h2>\n            <div className=\"btn-container\">\n\n              {\n                answers.map((answer, index) => {\n                  console.log(answer)\n                  return <button\n                    className=\"answer-btn\"\n                    key={index}\n                    onClick={() => checkAnswer(correct_answer === answer)}\n                    dangerouslySetInnerHTML={{ __html: answer }}></button>\n                })\n              }\n            </div>\n          </article>\n          <button className=\"next-question\" onClick={nextQuestion}>next question</button>\n        </section>\n      </main>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { AppProvider } from './context';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}